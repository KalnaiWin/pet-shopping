// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String
  images  String[]
  content String
  status  Boolean // Pin important
  topic   Topic

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments  Comment[]
  reactions Reaction[]

  @@map("posts")
}

enum Topic {
  New
  Issue
  Discuss
  Guide
  Empty
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade) // Add ? here

  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions  Reaction[]
  productsId String?
  Products   Products?  @relation(fields: [productsId], references: [id])

  @@map("comments")
}

model Reaction {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  type ReactionType

  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)

  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, commentId]) // 1 user chá»‰ 1 reaction cho 1 post/comment
  @@map("reactions")
}

enum ReactionType {
  LIKE
  DISLIKE
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  name          String
  email         String    @unique
  image         String?
  emailVerified Boolean
  role          Role      @default(USER)
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?

  sessions Session[]
  accounts Account[]
  posts    Post[]
  comments Comment[]
  Reaction Reaction[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  expiresAt DateTime
  token     String   @unique

  ipAddress      String?
  userAgent      String?
  impersonatedBy String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  accountId    String
  providerId   String
  userId       String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  @@map("accounts")
}

model Verification {
  id        String    @id @default(uuid())
  createdAt DateTime?
  updatedAt DateTime?

  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}

model Banner {
  id          String   @id @default(uuid())
  title       Category
  imageString String

  createdAt DateTime @default(now())
  order     Int
}

model Products {
  id          String   @id @default(uuid())
  name        String
  description String
  price       BigInt?
  maxPrice    BigInt
  delivery    String
  images      String[]
  discount    BigInt
  category    Category
  brand       Brands
  stock       BigInt
  origin      String
  expired     String
  status      Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  comments Comment[]

  @@map("products")
}

enum Brands {
  Moochie
  Vemedim
  AllCare
  Meowcat
  Orgo
  CATCHY
  BioPharmachemie
  Ecopets
  Ganador
  DrKyan
  Minino
  Wanpy
  Hanvet
  MODERNPETGEL
  oliveessence
  Empty
}

enum Category {
  ProductsForCat
  Insects
  Mushroom
  VitaminNutrition
  Toys
  Milk
  HygieneBeauty
  Other
  Discount
}
